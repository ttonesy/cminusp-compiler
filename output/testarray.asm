# MIPS CODE Generated by CS370 Compiler

.data


_L0: .asciiz		 "The following should be 13\n"
_L1: .asciiz		 "\n"
_L2: .asciiz		 "The following should be 3\n"
_L3: .asciiz		 "\n"

.align 2


.text

.globl main


main:			# function definition
	move $a1, $sp		# Activation Record carve out copy SP
	subi $a1 $a1 116		# Activation Record carve out copy size of function
	sw $ra, ($a1)		# Store Return Adress
	sw $sp 4($a1) 		# Store the old Stack Pointer
	move $sp, $a1		# Make SP the current activation record




	li $a0, 0		# expression is constant
	sw $a0 92($sp)		# ASSIGN store RHS temporarily
	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# 		# VAR local stack pointer plus offset
	lw $a1 92($sp)		# ASSIGN retrieve RHS
	sw $a1, ($a0)		# ASSIGN store RHS to LHS
_L4:			# # WHILE TOP target
	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# 		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# expression is a Var
	sw $a0, 96($sp)		# Expression store LHS temporarily
	li $a0, 19		# expression is constant
	move $a1, $a0		# right hand side needs to be a1
	lw $a0, 96($sp)		# Expression restore LHS from memory
	slt $a0, $a0, $a1		# EXPR less than
	beq $a0 $0 _L5		# WHILE branch out | beginning
	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# 		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# expression is a Var
	sw $a0, 100($sp)		# Expression store LHS temporarily
	li $a0, 1		# expression is constant
	move $a1, $a0		# right hand side needs to be a1
	lw $a0, 100($sp)		# Expression restore LHS from memory
	add $a0, $a0, $a1		# EXPR ADD
	sw $a0 104($sp)		# ASSIGN store RHS temporarily
	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# 		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# expression is a Var
	move $a1, $a0		# 		# VAR copy index array in a1
	sll $a1 $a1 2		# 		# muliply the index by wordszie via SLL
	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# 		# VAR local stack pointer plus offset
	add $a0 $a0 $a1		# 		# VAR array add internal offset
	lw $a1 104($sp)		# ASSIGN retrieve RHS
	sw $a1, ($a0)		# ASSIGN store RHS to LHS
	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# 		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# expression is a Var
	sw $a0, 108($sp)		# Expression store LHS temporarily
	li $a0, 1		# expression is constant
	move $a1, $a0		# right hand side needs to be a1
	lw $a0, 108($sp)		# Expression restore LHS from memory
	add $a0, $a0, $a1		# EXPR ADD
	sw $a0 112($sp)		# ASSIGN store RHS temporarily
	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# 		# VAR local stack pointer plus offset
	lw $a1 112($sp)		# ASSIGN retrieve RHS
	sw $a1, ($a0)		# ASSIGN store RHS to LHS
	j _L4		# WHILE JUMP BACK | check
_L5:			# END OF WHILE | loop back
	li $a0, 0		# expression is constant
	sw $a0 100($sp)		# ASSIGN store RHS temporarily
	li $a0, 19		# expression is constant
	move $a1, $a0		# 		# VAR copy index array in a1
	sll $a1 $a1 2		# 		# muliply the index by wordszie via SLL
	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# 		# VAR local stack pointer plus offset
	add $a0 $a0 $a1		# 		# VAR array add internal offset
	lw $a1 100($sp)		# ASSIGN retrieve RHS
	sw $a1, ($a0)		# ASSIGN store RHS to LHS
	la $a0, _L0		# The string adress
	li $v0, 4		# About to print a string
	syscall		# call write string

	li $a0, 10		# expression is constant
	move $a1, $a0		# 		# VAR copy index array in a1
	sll $a1 $a1 2		# 		# muliply the index by wordszie via SLL
	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# 		# VAR local stack pointer plus offset
	add $a0 $a0 $a1		# 		# VAR array add internal offset
	lw $a0, ($a0)		# expression is a Var
	move $a1, $a0		# 		# VAR copy index array in a1
	sll $a1 $a1 2		# 		# muliply the index by wordszie via SLL
	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# 		# VAR local stack pointer plus offset
	add $a0 $a0 $a1		# 		# VAR array add internal offset
	lw $a0, ($a0)		# expression is a Var
	move $a1, $a0		# 		# VAR copy index array in a1
	sll $a1 $a1 2		# 		# muliply the index by wordszie via SLL
	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# 		# VAR local stack pointer plus offset
	add $a0 $a0 $a1		# 		# VAR array add internal offset
	lw $a0, ($a0)		# expression is a Var
	li $v0, 1		# About to print a number
	syscall		# call write number


	la $a0, _L1		# The string adress
	li $v0, 4		# About to print a string
	syscall		# call write string

	la $a0, _L2		# The string adress
	li $v0, 4		# About to print a string
	syscall		# call write string

	li $a0, 10		# expression is constant
	sw $a0, 104($sp)		# Expression store LHS temporarily
	li $a0, 9		# expression is constant
	move $a1, $a0		# right hand side needs to be a1
	lw $a0, 104($sp)		# Expression restore LHS from memory
	add $a0, $a0, $a1		# EXPR ADD
	move $a1, $a0		# 		# VAR copy index array in a1
	sll $a1 $a1 2		# 		# muliply the index by wordszie via SLL
	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# 		# VAR local stack pointer plus offset
	add $a0 $a0 $a1		# 		# VAR array add internal offset
	lw $a0, ($a0)		# expression is a Var
	move $a1, $a0		# 		# VAR copy index array in a1
	sll $a1 $a1 2		# 		# muliply the index by wordszie via SLL
	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# 		# VAR local stack pointer plus offset
	add $a0 $a0 $a1		# 		# VAR array add internal offset
	lw $a0, ($a0)		# expression is a Var
	move $a1, $a0		# 		# VAR copy index array in a1
	sll $a1 $a1 2		# 		# muliply the index by wordszie via SLL
	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# 		# VAR local stack pointer plus offset
	add $a0 $a0 $a1		# 		# VAR array add internal offset
	lw $a0, ($a0)		# expression is a Var
	move $a1, $a0		# 		# VAR copy index array in a1
	sll $a1 $a1 2		# 		# muliply the index by wordszie via SLL
	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 12		# 		# VAR local stack pointer plus offset
	add $a0 $a0 $a1		# 		# VAR array add internal offset
	lw $a0, ($a0)		# expression is a Var
	li $v0, 1		# About to print a number
	syscall		# call write number


	la $a0, _L3		# The string adress
	li $v0, 4		# About to print a string
	syscall		# call write string

	li $a0, 0		# RETURN has not specified value set to 0
	lw $ra ($sp)		# restore old environement RA
	lw $sp 4($sp)		# Return from function store SP

	li $v0, 10		# EXIT from main we are done
	syscall		# EXIT everything

			# END OF FUNCTION

