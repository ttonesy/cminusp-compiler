# MIPS CODE Generated by CS370 Compiler

.data


_L0: .asciiz		 "\n"
_L1: .asciiz		 "enter X "

.align 2

x: .space 20		#global variables

.text

.globl main


main:			# function definition
	move $a1, $sp		# Activation Record carve out copy SP
	subi $a1 $a1 40		# Activation Record carve out copy size of function
	sw $ra, ($a1)		# Store Return Adress
	sw $sp 4($a1) 		# Store the old Stack Pointer
	move $sp, $a1		# Make SP the current activation record




	li $a0, 0		# expression is constant
	sw $a0 12($sp)		# ASSIGN store RHS temporarily
	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# 		# VAR local stack pointer plus offset
	lw $a1 12($sp)		# ASSIGN retrieve RHS
	sw $a1, ($a0)		# ASSIGN store RHS to LHS
_L2:			# # WHILE TOP target
	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# 		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# expression is a Var
	sw $a0, 16($sp)		# Expression store LHS temporarily
	li $a0, 5		# expression is constant
	move $a1, $a0		# right hand side needs to be a1
	lw $a0, 16($sp)		# Expression restore LHS from memory
	slt $a0, $a0, $a1		# EXPR less than
	beq $a0 $0 _L3		# WHILE branch out | beginning
	la $a0, _L1		# The string adress
	li $v0, 4		# About to print a string
	syscall		# call write string

	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# 		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# expression is a Var
	move $a1, $a0		# 		# VAR copy index array in a1
	sll $a1 $a1 2		# 		# muliply the index by wordszie via SLL
	la $a0, x		# 		# EMIT Var global variable
	add $a0 $a0 $a1		# 		# VAR array add internal offset
	li $v0, 5		# About to read a number
	syscall		# read in value, store in $v0
	sw $v0, ($a0)		# store read in value to memory


	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# 		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# expression is a Var
	sw $a0, 20($sp)		# Expression store LHS temporarily
	li $a0, 1		# expression is constant
	move $a1, $a0		# right hand side needs to be a1
	lw $a0, 20($sp)		# Expression restore LHS from memory
	add $a0, $a0, $a1		# EXPR ADD
	sw $a0 24($sp)		# ASSIGN store RHS temporarily
	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# 		# VAR local stack pointer plus offset
	lw $a1 24($sp)		# ASSIGN retrieve RHS
	sw $a1, ($a0)		# ASSIGN store RHS to LHS
	j _L2		# WHILE JUMP BACK | check
_L3:			# END OF WHILE | loop back
	li $a0, 0		# expression is constant
	sw $a0 20($sp)		# ASSIGN store RHS temporarily
	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# 		# VAR local stack pointer plus offset
	lw $a1 20($sp)		# ASSIGN retrieve RHS
	sw $a1, ($a0)		# ASSIGN store RHS to LHS
_L4:			# # WHILE TOP target
	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# 		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# expression is a Var
	sw $a0, 24($sp)		# Expression store LHS temporarily
	li $a0, 5		# expression is constant
	move $a1, $a0		# right hand side needs to be a1
	lw $a0, 24($sp)		# Expression restore LHS from memory
	slt $a0, $a0, $a1		# EXPR less than
	beq $a0 $0 _L5		# WHILE branch out | beginning
	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# 		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# expression is a Var
	move $a1, $a0		# 		# VAR copy index array in a1
	sll $a1 $a1 2		# 		# muliply the index by wordszie via SLL
	la $a0, x		# 		# EMIT Var global variable
	add $a0 $a0 $a1		# 		# VAR array add internal offset
	lw $a0, ($a0)		# expression is a Var
	sw $a0, 28($sp)		# Expression store LHS temporarily
	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# 		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# expression is a Var
	move $a1, $a0		# 		# VAR copy index array in a1
	sll $a1 $a1 2		# 		# muliply the index by wordszie via SLL
	la $a0, x		# 		# EMIT Var global variable
	add $a0 $a0 $a1		# 		# VAR array add internal offset
	lw $a0, ($a0)		# expression is a Var
	move $a1, $a0		# right hand side needs to be a1
	lw $a0, 28($sp)		# Expression restore LHS from memory
	mult $a0 $a1		# EXPR MULT
	mflo $a0		# EXPR mult
	li $v0, 1		# About to print a number
	syscall		# call write number


	la $a0, _L0		# The string adress
	li $v0, 4		# About to print a string
	syscall		# call write string

	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# 		# VAR local stack pointer plus offset
	lw $a0, ($a0)		# expression is a Var
	sw $a0, 32($sp)		# Expression store LHS temporarily
	li $a0, 1		# expression is constant
	move $a1, $a0		# right hand side needs to be a1
	lw $a0, 32($sp)		# Expression restore LHS from memory
	add $a0, $a0, $a1		# EXPR ADD
	sw $a0 36($sp)		# ASSIGN store RHS temporarily
	move $a0 $sp		# 		# VAR local make a copy of stackpointer
	addi $a0 $a0 8		# 		# VAR local stack pointer plus offset
	lw $a1 36($sp)		# ASSIGN retrieve RHS
	sw $a1, ($a0)		# ASSIGN store RHS to LHS
	j _L4		# WHILE JUMP BACK | check
_L5:			# END OF WHILE | loop back
	li $a0, 0		# RETURN has not specified value set to 0
	lw $ra ($sp)		# restore old environement RA
	lw $sp 4($sp)		# Return from function store SP

	li $v0, 10		# EXIT from main we are done
	syscall		# EXIT everything

			# END OF FUNCTION

